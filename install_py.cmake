cmake_minimum_required(VERSION 3.0)

project(wizaction VERSION 1.16.0)
set(SOURCE_REPO "lib-python-wizaction")

message("\nProject Name           : ${PROJECT_NAME}")
message("Project Source Dir     : ${PROJECT_SOURCE_DIR}")
message("Project Version        : ${PROJECT_VERSION}\n")



function(copy_compile_python)
    cmake_parse_arguments(PYTHON "" "SRC_FILE" "" ${ARGN})

    # Get the name of the relative path of the py file
    file(RELATIVE_PATH REL_SRC_FILE ${CMAKE_CURRENT_LIST_DIR} ${PYTHON_SRC_FILE})

    # Get the relative dir and name without extension and the extension
    get_filename_component(REL_PATH ${REL_SRC_FILE} DIRECTORY)
    get_filename_component(FILE_NAME ${REL_SRC_FILE} NAME_WE)

    # Construct the target file path
    set(DEST_FILE "${CMAKE_CURRENT_BINARY_DIR}/${REL_PATH}/${FILE_NAME}.py")
    set(COMPILED_FILE "${CMAKE_CURRENT_BINARY_DIR}/${REL_PATH}/${FILE_NAME}.pyc")

    add_custom_command(
        OUTPUT ${COMPILED_FILE} ${DEST_FILE}
        COMMAND "python" "-m" "py_compile" ${PYTHON_SRC_FILE} DEPENDS ${PYTHON_SRC_FILE}
        COMMAND ${CMAKE_COMMAND} -E copy ${PYTHON_SRC_FILE} ${DEST_FILE} DEPENDS ${PYTHON_SRC_FILE}
        COMMENT "Compiling and Copying ${REL_PATH}/${FILE_NAME}.py"
    )
    list(APPEND DEST_FILES ${DEST_FILE})

    install(FILES ${DEST_FILE} DESTINATION "lib/python/${REL_PATH}")

    set(TARGET_NAME "${REL_PATH}_${FILE_NAME}")
    string(REPLACE "/" "_" TARGET_NAME ${TARGET_NAME} )
    add_custom_target(${TARGET_NAME} ALL DEPENDS ${DEST_FILES})

endfunction(copy_compile_python)


function(install_py_files)
    file(GLOB_RECURSE PYTHON_SRC_FILES
        "${CMAKE_CURRENT_SOURCE_DIR}/*.py"
     )
    foreach(PYTHON_SRC_FILE ${PYTHON_SRC_FILES})
        copy_compile_python(SRC_FILE ${PYTHON_SRC_FILE})
    endforeach()

endfunction(install_py_files)




function(compile_ui)
    cmake_parse_arguments(UI "" "SRC_FILE;DESTINATION" "" ${ARGN})

    # Get the name of the relative path of the ui file
    file(RELATIVE_PATH REL_SRC_FILE ${CMAKE_CURRENT_SOURCE_DIR} ${UI_SRC_FILE})

    # Get the relative dir and name without extension
    get_filename_component(REL_PATH ${REL_SRC_FILE} DIRECTORY)
    get_filename_component(FILE_NAME ${REL_SRC_FILE} NAME_WE)

    # Construct the target file path
    set(PY_FILE ${CMAKE_CURRENT_BINARY_DIR}/${REL_PATH}/${FILE_NAME}.py)

    # Add the command that is responsible for converting the ui file to .py
    add_custom_command(
        OUTPUT ${PY_FILE}
        COMMAND "qtswitch_compile" ${UI_SRC_FILE} ${PY_FILE} DEPENDS ${SRC_UI_FILE}
        COMMENT "Converting ${REL_SRC_FILE} to ${REL_PATH}/${FILE_NAME}.py"
    )

    list(
        APPEND OUTPUT_FILES
        ${PY_FILE}
        "${CMAKE_CURRENT_BINARY_DIR}/${REL_PATH}/pyside_${FILE_NAME}.py"
        "${CMAKE_CURRENT_BINARY_DIR}/${REL_PATH}/pyqt_${FILE_NAME}.py"
    )

    # Construct the target name for this target file
    set(TARGET_NAME "${REL_PATH}_${FILE_NAME}")
    string(REPLACE "/" "_" TARGET_NAME ${TARGET_NAME} )

    # Add a custom target that corresponds to the custom command for the
    # input target file
    add_custom_target(${TARGET_NAME} ALL DEPENDS ${OUTPUT_FILES})

    # Define the make install behaviour for this target file
    # In this case it is installing the py files generated by the qtswitch to
    # the specified destination
    install(FILES ${OUTPUT_FILES} DESTINATION ${UI_DESTINATION})

endfunction(compile_ui)



function(install_ui_files)
    cmake_parse_arguments(UI "" "SOURCE;DESTINATION" "" ${ARGN})

    file(GLOB_RECURSE UI_SRC_FILES
        "${CMAKE_CURRENT_SOURCE_DIR}/*.ui"
        "${CMAKE_CURRENT_SOURCE_DIR}/*.qrc"
     )
    foreach(UI_SRC_FILE ${UI_SRC_FILES})
        compile_ui(SRC_FILE ${UI_SRC_FILE} DESTINATION ${UI_DESTINATION})
    endforeach()

endfunction(install_ui_files)
